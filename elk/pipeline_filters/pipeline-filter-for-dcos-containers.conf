# v1.0
# mon 14 jan 2019
# 0913

input {
  beats {
    port => 5044
  }
}

filter {
  # what type of log is this, stdout or stderr?
  # example: /var/lib/mesos/slave/slaves/<uuid>/frameworks/<uuid>/executors/app_uat_org-app-front-end.<uuid>/runs/latest/stdout
  if "/stdout" in [source] {
    mutate { add_field => { "log.source" => "stdout" } }
  } else if '/stderr' in [source] {
    mutate { add_field => { "log.source" => "stderr" } }
  }

  # does the source field contain an environment path like SIT?
  # example: /var/lib/mesos/slave/slaves/<uuid>/frameworks/<uuid>/executors/app_uat_org-app-front-end.<uuid>/runs/latest/stdout
  if "_dev_" in [source] {
    mutate { add_field => { "log.environment" => "DEV" } }
  } else if '_sit_' in [source] {
    mutate { add_field => { "log.environment" => "SIT" } }
  } else if '_uat_' in [source] {
    mutate { add_field => { "log.environment" => "UAT" } }
  } else if '_ppt_' in [source] {
    mutate { add_field => { "log.environment" => "PPT" } }
  } else if '_pr_' in [source] {
    mutate { add_field => { "log.environment" => "PROD" } }
  }

  # fields.log_type is defined by the filebeats yml configuration - depending on the directory that the log comes from
  # if the log type is "application output", and hasn't already been dealt with by the Nginx filters above, it's our proper JS logging output
  if([fields][log_type] == "application_output") {
    # if the message actually is JSON
    if [message] =~ "^\{.*\}[\s\S]*$" {
      mutate { add_field => { "log.type" => "Application: JSON" } }

      json {
        id => "jsonfilter"
        source => "message"
        # remove some irrelevant fields
        remove_field => ["_sourceUri", "_user", "sourceUri", "user", "pid", "v"]
      }

      # unix epoch timestamp from our application output
      date {
        match => [ "time", "UNIX_MS" ]
        remove_field => ["time"]
      }

      # determine the project, e.g. persona/corp website/whatever
      if [name] =~ "org-app-" {
        mutate { add_field => { "app.project" => "MHA" } }
      } else if [name] =~ "org-app2-" {
        mutate { add_field => { "app.project" => "PER" } }
      } else {
        mutate { add_field => { "app.project" => "Unknown" } }
      }

      mutate {
        rename => ["name", "app.service"]
        rename => ["level", "app.logLevel"]
        rename => ["hostname", "dcos.container_hostname"]
        rename => ["_contactId", "app.contactId"]
        rename => ["contactId", "app.contactId"]
        rename => ["_correlationId", "app.correlationId"]
        rename => ["correlationId", "app.correlationId"]
        rename => ["_method", "app.req.method"]
        rename => ["method", "app.req.method"]
        rename => ["_destination", "app.req.destination"]
        rename => ["destination", "app.req.destination"]
        rename => ["_status", "app.req.status"]
        rename => ["status", "app.req.status"]
        rename => ["_messageType", "app.req.messageType"]
        rename => ["messageType", "app.req.messageType"]
        rename => ["_msg", "app.logText"]
        rename => ["msg", "app.logText"]
        rename => ["errResponse", "app.errors.response"]
        rename => ["errMessages", "app.errors.messages"]
        rename => ["message", "app.rawOutput"]
      }
    }
    else {
      # does the source field contain an information about what the log is, e.g. Marathon LB or the Agent logs?
      # example: /var/log/mesos/mesos-agent.log
      # example: /var/lib/mesos/slave/slaves/<uuid>/<uuid>/executors/marathon-lb.<uuid>/runs/latest/stdout
      if 'marathon-lb' in [source] {
        mutate { add_field => { "log.type" => "DCOS: Marathon" } }
      } else if 'agent' in [source] {
        mutate { add_field => { "log.type" => "DCOS: Agent" } }
      } else if 'platform_' in [source] {
        mutate { add_field => { "log.type" => "Platform Container" } }
      } else {
        # this is a bodge for stderr logs because they're not JSON - basically, if the log isn't JSON but has an app.service name already, then it must be an application's stderr logs because for other non-application logs the name doesn't get set until later
        if ("" in [app][service]) {
          mutate { add_field => { "log.type" => "Application: Error logs" } }
        } else {
          mutate { add_field => { "log.type" => "Unknown" } }
        }
      }

      # some of our containers use Nginx, which has a totally different format to the DCOS logs and our application output
      grok {
        # custom pattern bound to APP_NAME allows us to extract the container name from the container source
        patterns_dir => ["/etc/logstash/patterns"]
        # ... then store it in "app.service" where the other application output logs are saved
        match => { "source" => "%{APP_NAME:app.service}" }
      }

      # if the message is an Nginx log...
      # this will need updating if additional services in future require Nginx logging instead of Node
      if [app.service] in ["org-app-front-end", "org-app-signup-front-end"] {
        grok {
          # custom pattern bound to APP_NAME allows us to extract the container name from the container source
          patterns_dir => ["/etc/logstash/patterns"]

          match => [ "message" , "%{NGINX_ACCESS}"]

          # this is (another) bodge because you can't "update" fields from within the Grok plugin
          add_field => { "remove.this" => "true" }
        }

        # if this field has been identified as being Nginx, let's change "log.type" to reflect this
        if ("true" in [remove.this]) {
          mutate { update => { "log.type" => "Application: NGINX" } }

          # then let's remove this rank temporary field
          mutate { remove_field => ["remove.this"] }
        }
      }
    }
  }

  # now that we've done all of the processing based on this field, get rid of it
  mutate { remove_field => [ "fields.log_type" ] }
}

output {
  elasticsearch {
    hosts => "10.128.0.7"
    index => "dev_sit_uat-dcos-%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }

  # comment this out on Pre-Prod and Prod environments
  stdout { codec => rubydebug }
}
