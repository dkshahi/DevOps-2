# v2.7
# Weds 1st May, 2019
# 14:49

input {
  beats {
    port => 5044
  }
}

filter {
  # what type of log is this, stdout or stderr?
  # example: /var/lib/mesos/slave/slaves/<uuid>/frameworks/<uuid>/executors/project_uat_org-prj-front-end.<uuid>/runs/latest/stdout
  if "/stdout" in [source] {
    mutate { add_field => { "log.source" => "stdout" } }
  } else if '/stderr' in [source] {
    mutate { add_field => { "log.source" => "stderr" } }
  }

  # does the source field contain an environment path like SIT?
  # example: /var/lib/mesos/slave/slaves/<uuid>/frameworks/<uuid>/executors/project_uat_org-prj-front-end.<uuid>/runs/latest/stdout
  if "_dev_" in [source] {
    mutate { add_field => { "log.environment" => "DEV" } }
  } else if '_sit_' in [source] {
    mutate { add_field => { "log.environment" => "SIT" } }
  } else if '_uat_' in [source] {
    mutate { add_field => { "log.environment" => "UAT" } }
  } else if '_ppt_' in [source] {
    mutate { add_field => { "log.environment" => "PPT" } }
  } else if '_pr_' in [source] {
    mutate { add_field => { "log.environment" => "PROD" } }
  }

  # fields.log_type is defined by the filebeats yml configuration - depending on the directory that the log comes from
  # if the log type is "application output", and hasn't already been dealt with by the Nginx filters above, it's our proper JS logging output
  if([fields][log_type] == "application_output") {
    # if the message actually is JSON
    if [message] =~ "^\{.*\}[\s\S]*$" {
      mutate { add_field => { "log.type" => "Application: JSON" } }

      json {
        id => "jsonfilter"
        source => "message"
        # remove some irrelevant fields
        remove_field => ["_sourceUri", "_user", "sourceUri", "user", "pid", "v"]
      }

      # unix epoch timestamp from our application output
      date {
        match => [ "time", "UNIX_MS", "ISO8601" ]
        remove_field => ["time"]
      }

      # determine the project, e.g. persona/corp website/whatever
      if [name] =~ "org-prj-" {
        mutate { add_field => { "app.project" => "MHA" } }
      } else if [name] =~ "org-per" {
        mutate { add_field => { "app.project" => "PER" } }
      } else {
        # secure proxy uses an AzureAD OIDC library which spits out logs that we have no control
        # over. the following gives us a hack to bring those logs into line
        if "secure-proxy" in [source] {
          mutate { 
            gsub => [ "name", "AzureAD: ", "" ]
            add_field => {
              "app.service" => "org-prj-secure-proxy"
              "app.logText" => "%{name} - %{msg}"
              "app.project" => "MHA"
            }
            replace => { 
              "level" => 10
            }
            remove_field => ["name", "msg"]
          }
        } else {
          mutate { add_field => { "app.project" => "Unknown" } }
          mutate { add_tag => [ "unknown_content" ] }
        }
      }

      mutate {
        rename => ["name", "app.service"]
        rename => ["level", "app.logLevel"]
        rename => ["hostname", "dcos.container_hostname"]
        rename => ["_contactId", "app.contactId"]
        rename => ["contactId", "app.contactId"]
        rename => ["_correlationId", "app.correlationId"]
        rename => ["correlationId", "app.correlationId"]
        rename => ["_method", "app.req.method"]
        rename => ["method", "app.req.method"]
        rename => ["_destination", "app.req.destination"]
        rename => ["destination", "app.req.destination"]
        rename => ["_status", "app.req.status"]
        rename => ["status", "app.req.status"]
        rename => ["_messageType", "app.req.messageType"]
        rename => ["messageType", "app.req.messageType"]
        rename => ["_msg", "app.logText"]
        rename => ["msg", "app.logText"]
        rename => ["errResponse", "app.errors.response"]
        rename => ["errMessages", "app.errors.messages"]
        rename => ["message", "app.rawOutput"]

        # Make sure that our two key number fields are forced to "integer" types; otherwise some logs cause these to fail and they can't be filtered out
        convert => { "app.req.status" => "integer" }
        convert => { "app.logLevel" => "integer" }
      }

      # error handling for MHA
      #   Persona can also be included in this, but only once their logs have been brought up to date by the dev team
      if "MHA" in [app.project] {
        if [app.logLevel] and [app.logLevel] >= 50 {
          mutate {
            add_tag => [ "error" ]
            add_tag => [ "output-teams" ]
          }
        }

        if [app.req.status] and [app.req.status] >= 500 {
          mutate {
            add_tag => [ "error" ]
            add_tag => [ "output-teams" ]
            add_tag => [ "output-pagerduty" ]
          }
        }
      }
    }
    else {
      # does the source field contain an information about what the log is, e.g. Marathon LB or the Agent logs?
      # example: /var/log/mesos/mesos-agent.log
      # example: /var/lib/mesos/slave/slaves/<uuid>/<uuid>/executors/marathon-lb.<uuid>/runs/latest/stdout
      if 'marathon-lb' in [source] {
        mutate { add_field => { "log.type" => "DCOS: Marathon" } }
      } else if 'mesos-agent' in [source] {
        mutate { add_field => { "log.type" => "DCOS: Agent" } }
      } else if 'platform_' in [source] {
        mutate { add_field => { "log.type" => "Platform Container" } }
      } else {
        # this is a bodge for stderr logs because they're not JSON - basically, if the log isn't JSON but has an app.service name already, then it must be an application's stderr logs because for other non-application logs the name doesn't get set until later
        if "" in [app.service] {
          mutate { add_field => { "log.type" => "Application: Error logs" } }
        } else {
          mutate { add_field => { "log.type" => "Unknown" } }
          mutate { add_tag => [ "unknown_content" ] }
        }
      }

      # some of our containers use Nginx, which has a totally different format to the DCOS logs and our application output
      grok {
        # custom pattern bound to APP_NAME allows us to extract the container name from the container source
        patterns_dir => ["/etc/logstash/patterns"]
        # ... then store it in "app.service" where the other application output logs are saved
        match => { "source" => "%{APP_NAME:app.service}" }
      }

      # if the message is an Nginx log...
      # this will need updating if additional services in future require Nginx logging instead of Node
      if 'front-end' in [app.service] {
        grok {
          # custom pattern bound to APP_NAME allows us to extract the container name from the container source
          patterns_dir => ["/etc/logstash/patterns"]

          match => [ "message" , "%{NGINX_ACCESS}"]

          # this is (another) bodge because you can't "update" fields from within the Grok plugin
          add_field => { "remove.this" => "true" }
        }

        # if this field has been identified as being Nginx, let's change "log.type" to reflect this
        if ("true" in [remove.this]) {
          mutate {
            update => { "log.type" => "Application: NGINX" }
            remove_tag => [ "unknown_content" ]
            remove_field => [ "remove.this" ]
          }
        }
      }

      # Nginx containers aren't being tagged with projects properly, so...
      if 'prj' in [app.service] {
        mutate { add_field => { "app.project" => "MHA" } }
      } else if 'per' in [app.service] {
        mutate { add_field => { "app.project" => "PER" } }
      } else if 'platform' in [app.service] {
        mutate { add_field => { "app.project" => "Platform" } }
      }
      else {
        mutate { add_field => { "app.project" => "Unknown" } }
        mutate { add_tag => [ "unknown_content" ] }
      }
    }
  }

  # now that we've done all of the processing based on this field, get rid of it
  mutate { remove_field => [ "fields.log_type" ] }
}

output {
  elasticsearch {
    hosts => "10.128.0.4"
    index => "ppt-dcos-%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }

  if "PROD" in [log.environment] {
    # 500 errors logged out to PagerDuty
    if "output-pagerduty" in [tags] {
      email {
        from => 'from@email.address'
        to => "to@email.address"
        subject => "500 error in %{app.service}"
        body => "%{app.rawOutput}"
        address => "smtp.sendgrid.net"
        port => 587
        username => "SendgridUsername"
        password => "Password1!"
        use_tls => true
      }
    }
    
    # All log.error messages spammed to Alerts & Notifications channel
    if "output-teams" in [tags] {
      # Some of our logs are based on REQUEST/RESPONSE and just include a status. These should always be 500+ errors
      if [app.req.destination] and [app.req.method] {
        email {
          from => 'from@email.address'
          to => "to@email.address"
          subject => "Critical error encountered on %{app.service}"
          htmlbody => "<h2>Error details</h2><ul><li>[<strong>Date:</strong> %{+dd MMM yyyy}] [<strong>Time:</strong> %{+HH:mm:SSS}]</li><li>[<strong>Service</strong>:&nbsp;&nbsp;%{app.service}]</li><li>[<strong>Destination:</strong> %{app.req.destination}] [<strong>Method:</strong> %{app.req.method}] [<strong>Type:</strong> %{app.req.messageType}] [<strong>Status:</strong> %{app.req.status}]</li></ul><h2>Full unformatted log output</h2><pre>%{app.rawOutput}</pre>"
          address => "smtp.sendgrid.net"
          port => 587
          username => "SendgridUsername"
          password => "Password1!"
          use_tls => true
        }
      }
      # Our newer logs however use "app.logText" and "app.error.messages/response"
      else if [app.logText] {
        email {
          from => 'from@email.address'
          to => "to@email.address"
          subject => "Application error encountered on %{app.service}"
          htmlbody => "<h2>Error details</h2><ul><li>[<strong>Date:</strong> %{+dd MMM yyyy}] [<strong>Time:</strong> %{+HH:mm:SSS}]</li><li>[<strong>Service</strong>:&nbsp;&nbsp;%{app.service}]</li><li>[<strong>Log text</strong>:&nbsp;&nbsp;%{app.logText}]</li><li>[<strong>Error Response:</strong> %{app.errors.response}] [<strong>Error Messages:</strong> %{app.errors.messages}]</li></ul><h2>Full unformatted log output</h2><pre>%{app.rawOutput}</pre>"
          address => "smtp.sendgrid.net"
          port => 587
          username => "SendgridUsername"
          password => "Password1!"
          use_tls => true
        }
      }
    }
  }


  # comment this out on Pre-Prod and Prod environments
  stdout { codec => rubydebug }
}